/// <reference path="MinecraftUtils.d.ts" />
declare namespace MinecraftRenderer {
    class Quaternion extends java.lang.Object {
        static readonly ONE: Quaternion;
        private w;
        private x;
        private y;
        private z;
        constructor(x: number, y: number, z: number, w: number);
        constructor(vec: Vector3f, f: number, bool: boolean);
        constructor(f: number, f1: number, f2: number, bool: boolean);
        constructor(q: Quaternion);
        equals(obj: java.lang.Object): boolean;
        hashCode(): number;
        toString(): string;
        getX(): number;
        getY(): number;
        getZ(): number;
        getW(): number;
        multiply(q: Quaternion): void;
        multiply(f: number): void;
        conjugate(): void;
        set(f: number, f1: number, f2: number, f3: number): void;
        private static cos;
        private static sin;
        normalize(): void;
        copy(): Quaternion;
    }
    class Vector3f extends java.lang.Object {
        static readonly XN: Vector3f;
        static readonly XP: Vector3f;
        static readonly YN: Vector3f;
        static readonly YP: Vector3f;
        static readonly ZN: Vector3f;
        static readonly ZP: Vector3f;
        private x;
        private y;
        private z;
        constructor();
        constructor(x: number, y: number, z: number);
        constructor(vec: MinecraftUtils.Vec3d);
        equals(obj: java.lang.Object): boolean;
        hashCode(): number;
        getX(): number;
        getY(): number;
        getZ(): number;
        mul(m: number): void;
        mul(mx: number, my: number, mz: number): void;
        clamp(a: number, b: number): void;
        set(x: number, y: number, z: number): void;
        add(x: number, y: number, z: number): void;
        add(vec: Vector3f): void;
        sub(vec: Vector3f): void;
        dot(vec: Vector3f): number;
        normalize(): boolean;
        cross(vec: Vector3f): void;
        transform(matrix: Matrix3f): void;
        transform(quat: Quaternion): void;
        lerp(vec: Vector3f, f: number): void;
        rotation(f: number): Quaternion;
        rotationDegrees(f: number): Quaternion;
        copy(): Vector3f;
        toString(): string;
    }
    class Matrix3f extends java.lang.Object {
        private static readonly SQ2;
        private static readonly CS;
        private static readonly SS;
        private static readonly G;
        m00: number;
        m01: number;
        m02: number;
        m10: number;
        m11: number;
        m12: number;
        m20: number;
        m21: number;
        m22: number;
        constructor();
        constructor(q: Quaternion);
        constructor(m: Matrix4f);
        constructor(m: Matrix3f);
        static makeScaleMatrix(f: number, f1: number, f2: number): Matrix3f;
        transpose(): void;
        equals(obj: java.lang.Object): boolean;
        hashCode(): number;
        set(m: Matrix3f): void;
        toString(): string;
        setIdentity(): void;
        adjugateAndDet(): number;
        invert(): boolean;
        mul(m: Matrix3f): void;
        mul(q: Quaternion): void;
        mul(f: number): void;
        copy(): Matrix3f;
    }
    class Matrix4f extends java.lang.Object {
        m00: number;
        m01: number;
        m02: number;
        m03: number;
        m10: number;
        m11: number;
        m12: number;
        m13: number;
        m20: number;
        m21: number;
        m22: number;
        m23: number;
        m30: number;
        m31: number;
        m32: number;
        m33: number;
        constructor();
        constructor(m: Matrix4f);
        constructor(q: Quaternion);
        equals(obj: java.lang.Object): boolean;
        hashCode(): number;
        private static bufferIndex;
        toString(): string;
        write(buf: java.nio.FloatBuffer): void;
        setIdentity(): void;
        adjugateAndDet(): number;
        transpose(): void;
        invert(): boolean;
        mul(f: number): void;
        mul(m: Matrix4f): void;
        mul(q: Quaternion): void;
        static perspective(fov: number, aspectRatio: number, nearPlane: number, farPlane: number): Matrix4f;
        static orthographic(width: number, height: number, nearPlane: number, farPlane: number): Matrix4f;
        translate(vec: Vector3f): void;
        copy(): Matrix4f;
        static makeScale(f: number, f1: number, f2: number): Matrix4f;
        static makeTranslate(f: number, f1: number, f2: number): Matrix4f;
    }
}
